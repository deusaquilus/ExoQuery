

    TableQuery<Person>().filter {}

ExoQuery {
  val p = from(Person())
  val a = join(Address()) { a -> a().owner ?: "nobody" eq p().id }
  select(Pair(p(), a()))
}

select {
  val p = from(Person())
  val a = join(Address()) { owner ?: "nobody" == p().id }
  yield(Pair(p(), a()))
}

select {
  val p = from(Person())
  val a = join(Address()) { owner == p().id }
  yield { Pair(p(), a()) }
}

ExoQuery {
  val p = from(Person())
  val a = join(Address()) { owner == p().id }
  select { Pair(p(), a()) }
}


inert {
  val p = from(Person1())
  into Person(p.a, p.b, a.a)
}

ExoQuery {
  val p = from(Person1())
  insert into Person(p.a, p.b, a.a)
}

update {
  val p = from(Person())
  val a = join(Address()) { a -> a().owner ?: "nobody" eq p().id }
  set(Person(p.a, p.b, a.a))
}


ExoQuery {
  val p = from(Person())
  val a = join(Address()) { a -> a().owner ?: "nobody" eq p().id }
  upddate.set(Person(p.a, p.b, a.a))
}


update<Person> {
  where { name == "Joe" }
  set { it.name to p.name, it.age to 42 }
}


select {
  val p = from(Person())
  val a = join(Address()) { a -> a().owner ?: "nobody" eq p().id }
  SQL.Pair(p(), a())
}




       TableQuery<Person>.filter {{p -> p.name == "Joe" }}
       TableQuery<Person>.filter {p -> p.name == "Joe" }

    select {
      val p = from<Person>()
      val a = join<Address>().on{{ a -> a.owner ?: "nobody" eq p.id }}
      Entity.Pair(p, a)
    }

    Table<Person>.map[{p -> p.name}]
    Table<Person>.map {p -> p.name}

    select {
      val p = from(Table<Person>())
      val a = join(Table<Address>()).on[{ a -> a.owner ?: "nobody" eq p.id }]
      Entity.Pair(p, a)
    }

    select {
        val p = from<Person>()
    }

    Table<Person>
    Person()

