package io.exoquery.sql

import io.exoquery.util.TraceConfig
import io.exoquery.util.Tracer
import io.exoquery.util.unaryPlus
import io.exoquery.xr.BinaryOperator
import io.exoquery.xr.OP
import io.exoquery.xr.XR

class MySqlDialect(override val traceConf: TraceConfig = TraceConfig.empty) : SqlIdiom {
  override val useActionTableAliasAs = SqlIdiom.ActionTableAliasBehavior.UseAs

  override val trace: Tracer by lazy { Tracer(traceType, traceConf, 1) }

  override fun xrBinaryOpTokenImpl(binaryOpImpl: XR.BinaryOp): Token = with(binaryOpImpl) {
    when {
      op is OP.strPlus -> +"CONCAT(${a.token}, ${b.token})"
      else -> super.xrBinaryOpTokenImpl(binaryOpImpl)
    }
  }

  override fun xrOrderByCriteriaTokenImpl(orderByCriteriaImpl: OrderByCriteria): Token = with (orderByCriteriaImpl) {
    when(this.ordering) {
      XR.Ordering.AscNullsFirst -> +"${ast.token} ASC"
      XR.Ordering.DescNullsFirst -> +"ISNULL(${ast.token}) DESC, ${ast.token} DESC"
      XR.Ordering.AscNullsLast -> +"ISNULL(${ast.token}) ASC, ${ast.token} ASC"
      XR.Ordering.DescNullsLast -> +"${ast.token} DESC"
      else -> super.xrOrderByCriteriaTokenImpl(orderByCriteriaImpl)
    }
  }

  // MySQL does not allow limit without offset. See: https://stackoverflow.com/questions/255517/mysql-offset-infinite-rows
  override fun limitOffsetToken(query: Statement, limit: XR.Expression?, offset: XR.Expression?): Token =
    when {
      limit == null && offset != null -> +"$query LIMIT 18446744073709551610 OFFSET ${offset.token}"
      else -> query
    }
}

//
//  override def defaultAutoGeneratedToken(field: Token) = stmt"($field) VALUES (DEFAULT)"
//
//  override implicit def operationTokenizer(implicit
//    astTokenizer: Tokenizer[Ast],
//    strategy: NamingStrategy
//  ): Tokenizer[Operation] =
//    Tokenizer[Operation] {
//      case BinaryOperation(a, StringOperator.`+`, b) => stmt"CONCAT(${a.token}, ${b.token})"
//      case other                                     => super.operationTokenizer.token(other)
//    }
//
//  override implicit def orderByCriteriaTokenizer(implicit
//    astTokenizer: Tokenizer[Ast],
//    strategy: NamingStrategy
//  ): Tokenizer[OrderByCriteria] = Tokenizer[OrderByCriteria] {
//    case OrderByCriteria(prop, AscNullsFirst | Asc)  => stmt"${prop.token} ASC"
//    case OrderByCriteria(prop, DescNullsFirst)       => stmt"ISNULL(${prop.token}) DESC, ${prop.token} DESC"
//    case OrderByCriteria(prop, AscNullsLast)         => stmt"ISNULL(${prop.token}) ASC, ${prop.token} ASC"
//    case OrderByCriteria(prop, DescNullsLast | Desc) => stmt"${prop.token} DESC"
//  }
//
//  override protected def limitOffsetToken(
//    query: Statement
//  )(implicit astTokenizer: Tokenizer[Ast], strategy: NamingStrategy) =
//    Tokenizer[(Option[Ast], Option[Ast])] {
//      case (None, Some(offset)) => stmt"$query LIMIT 18446744073709551610 OFFSET ${offset.token}"
//      case other                => super.limitOffsetToken(query).token(other)
//    }
//}
//
//object MySQLDialect extends MySQLDialect
//
//trait MySQL5Dialect extends MySQLDialect {
//  override def useActionTableAliasAs: ActionTableAliasBehavior = ActionTableAliasBehavior.Hide
//}
//
//object MySQL5Dialect extends MySQL5Dialect
